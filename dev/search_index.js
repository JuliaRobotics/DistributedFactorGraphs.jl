var documenterSearchIndex = {"docs":
[{"location":"DataStructure/#DFG-Data-Structures-1","page":"DFG Data Structures","title":"DFG Data Structures","text":"","category":"section"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"Variables and factors can potentially contain a lot of data, so DFG has different structures that are specialized for each use-case and level of detail. For example, if you  want to retrieve just a simple summary of the structure, you can use the summary or skeleton structures to identify variables and factors of interest and then retrieve more detail on the subset.","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"Note that not all drivers support all of the structures.","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"The following section discusses the datastructures for each level. A quick summary of the types and the available properties (some of which are derived) is provided below.","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"Accessible properties for each of the variable structures:","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":" Label Timestamp Tags Estimates Soft Type Solvable Solver Data Small Data Big Data Entries\nSkeletonDFGVariable X  X      \nDFGVariableSummary X X X X Symbol    X\nDFGVariable X X X X X X X X X","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"Accessible properties for each of the factor structures:","category":"page"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":" Label Timestamp Tags Factor Type Solvable Solver Data\nSkeletonDFGFactor X  X   \nDFGFactorSummary X X X   \nDFGFactor X X X X X X","category":"page"},{"location":"DataStructure/#DFG-Skeleton-1","page":"DFG Data Structures","title":"DFG Skeleton","text":"","category":"section"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"SkeletonDFGVariable\nSkeletonDFGFactor","category":"page"},{"location":"DataStructure/#DFG-Summary-1","page":"DFG Data Structures","title":"DFG Summary","text":"","category":"section"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"DFGVariableSummary\nDFGFactorSummary","category":"page"},{"location":"DataStructure/#Full-DFG-Node-1","page":"DFG Data Structures","title":"Full DFG Node","text":"","category":"section"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"DFGVariable\nDFGFactor","category":"page"},{"location":"DataStructure/#Additional-Offloaded-Data-1","page":"DFG Data Structures","title":"Additional Offloaded Data","text":"","category":"section"},{"location":"DataStructure/#","page":"DFG Data Structures","title":"DFG Data Structures","text":"Additional, larger data can be associated with variables using keyed big data entries.  ","category":"page"},{"location":"func_ref/#DistributedFactorGraphs-Functions-Reference-1","page":"Function Reference","title":"DistributedFactorGraphs Functions Reference","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Pages = [\n    \"func_ref.md\"\n]\nDepth = 3","category":"page"},{"location":"func_ref/#DistributedFactorGraphs-Module-1","page":"Function Reference","title":"DistributedFactorGraphs Module","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"DistributedFactorGraphs.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.DistributedFactorGraphs","page":"Function Reference","title":"DistributedFactorGraphs.DistributedFactorGraphs","text":"DistributedFactorGraphs.jl provides a flexible factor graph API for use in the Caesar.jl ecosystem.\n\nThe package supplies:\n\nA standardized API for interacting with factor graphs\nImplementations of the API for in-memory and database-driven operation\nVisualization extensions to validate the underlying graph\n\n\n\n\n\n","category":"module"},{"location":"func_ref/#Entities-1","page":"Function Reference","title":"Entities","text":"","category":"section"},{"location":"func_ref/#Abstract-DFG-1","page":"Function Reference","title":"Abstract DFG","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"entities/AbstractDFG.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.AbstractDFG","text":"abstract type AbstractDFG{T<:AbstractParams}\n\nAbstract parent struct for a DFG graph.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.AbstractDFGFactor","text":"abstract type AbstractDFGFactor <: DFGNode\n\nAn abstract DFG factor.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFGVariable","page":"Function Reference","title":"DistributedFactorGraphs.AbstractDFGVariable","text":"abstract type AbstractDFGVariable <: DFGNode\n\nAn abstract DFG variable.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDataEntry","page":"Function Reference","title":"DistributedFactorGraphs.AbstractDataEntry","text":"abstract type AbstractDataEntry\n\nAbstract parent struct for big data entry.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractParams","page":"Function Reference","title":"DistributedFactorGraphs.AbstractParams","text":"abstract type AbstractParams\n\nAbstract parent struct for solver parameters.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.DFGNode","page":"Function Reference","title":"DistributedFactorGraphs.DFGNode","text":"abstract type DFGNode\n\nAbstract parent struct for DFG variables and factors.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.NoSolverParams","page":"Function Reference","title":"DistributedFactorGraphs.NoSolverParams","text":"struct NoSolverParams <: AbstractParams\n\nEmpty structure for solver parameters.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#Summary-DFG-1","page":"Function Reference","title":"Summary DFG","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"entities/AbstractDFGSummary.jl\"]","category":"page"},{"location":"func_ref/#DFG-Variable-Nodes-1","page":"Function Reference","title":"DFG Variable Nodes","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"entities/DFGVariable.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.DFGVariable","page":"Function Reference","title":"DistributedFactorGraphs.DFGVariable","text":"struct DFGVariable{T<:InferenceVariable} <: AbstractDFGVariable\n\nComplete variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::TimeZones.ZonedDateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\nnstime::Dates.Nanosecond\nNano second time, for more resolution on timestamp (only subsecond information)\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\nppeDict::Dict{Symbol, var\"#s19\"} where var\"#s19\"<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nsolverDataDict::Dict{Symbol, VariableNodeData{T}} where T<:InferenceVariable\nDictionary of solver data. May be a subset of all solutions if a solver key was specified in the get call. Accessors: addVariableSolverData!, updateVariableSolverData!, and deleteVariableSolverData!\nsmallData::Dict{Symbol, Union{Bool, Float64, Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}, Vector{String}, String}}\nDictionary of small data associated with this variable. Accessors: getSmallData, setSmallData!\ndataDict::Dict{Symbol, AbstractDataEntry}\nDictionary of large data associated with this variable. Accessors: addDataEntry!, getDataEntry, updateDataEntry!, and deleteDataEntry!\nsolvable::Base.RefValue{Int64}\nSolvable flag for the variable. Accessors: getSolvable, setSolvable!\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.DFGVariable-Union{Tuple{T}, Tuple{Symbol, T}} where T<:InferenceVariable","page":"Function Reference","title":"DistributedFactorGraphs.DFGVariable","text":"DFGVariable(label, variableType; timestamp, nstime, tags, estimateDict, solverDataDict, smallData, dataDict, solvable)\n\n\nThe default DFGVariable constructor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.DFGVariableSummary","page":"Function Reference","title":"DistributedFactorGraphs.DFGVariableSummary","text":"struct DFGVariableSummary <: AbstractDFGVariable\n\nSummary variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::TimeZones.ZonedDateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\nppeDict::Dict{Symbol, var\"#s38\"} where var\"#s38\"<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nvariableTypeName::Symbol\nSymbol for the variableType for the underlying variable. Accessor: getVariableType\ndataDict::Dict{Symbol, AbstractDataEntry}\nDictionary of large data associated with this variable. Accessors: addDataEntry!, getDataEntry, updateDataEntry!, and deleteDataEntry!\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.MeanMaxPPE","page":"Function Reference","title":"DistributedFactorGraphs.MeanMaxPPE","text":"struct MeanMaxPPE <: AbstractPointParametricEst\n\nData container to store Parameteric Point Estimate (PPE) for mean and max.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.PackedVariableNodeData","page":"Function Reference","title":"DistributedFactorGraphs.PackedVariableNodeData","text":"mutable struct PackedVariableNodeData\n\nPacked VariabeNodeData structure for serializing DFGVariables.\n\n\n\nFields:\n\nvecval::Vector{Float64}\ndimval::Int64\nvecbw::Vector{Float64}\ndimbw::Int64\nBayesNetOutVertIDs::Vector{Symbol}\ndimIDs::Vector{Int64}\ndims::Int64\neliminated::Bool\nBayesNetVertID::Symbol\nseparator::Vector{Symbol}\nvariableType::String\ninitialized::Bool\ninferdim::Float64\nismargin::Bool\ndontmargin::Bool\nsolveInProgress::Int64\nsolvedCount::Int64\nsolveKey::Symbol\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.SkeletonDFGVariable","page":"Function Reference","title":"DistributedFactorGraphs.SkeletonDFGVariable","text":"struct SkeletonDFGVariable <: AbstractDFGVariable\n\nSkeleton variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.VariableNodeData","page":"Function Reference","title":"DistributedFactorGraphs.VariableNodeData","text":"mutable struct VariableNodeData{T<:InferenceVariable}\n\nData container for solver-specific data.\n\n\n\nFields:\n\nval::Matrix{Float64}\nbw::Matrix{Float64}\nBayesNetOutVertIDs::Vector{Symbol}\ndimIDs::Vector{Int64}\ndims::Int64\neliminated::Bool\nBayesNetVertID::Symbol\nseparator::Vector{Symbol}\nvariableType::InferenceVariable\ninitialized::Bool\ninferdim::Float64\nismargin::Bool\ndontmargin::Bool\nsolveInProgress::Int64\nsolvedCount::Int64\nsolveKey::Symbol\nevents::Dict{Symbol, Base.GenericCondition{ReentrantLock}}\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.getEstimateFields-Tuple{MeanMaxPPE}","page":"Function Reference","title":"DistributedFactorGraphs.getEstimateFields","text":"getEstimateFields(_)\n\n\nReturn the fields of MeanMaxPPE that are estimates. NOTE: This is needed for each AbstractPointParametricEst. Closest we can get to a decorator pattern.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DFG-Factor-Nodes-1","page":"Function Reference","title":"DFG Factor Nodes","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"entities/DFGFactor.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.DFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.DFGFactor","text":"struct DFGFactor{T, N} <: AbstractDFGFactor\n\nComplete factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::TimeZones.ZonedDateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\nnstime::Dates.Nanosecond\nNano second time, for more resolution on timestamp (only subsecond information)\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\nsolverData::Base.RefValue{GenericFunctionNodeData{T}} where T\nSolver data. Accessors: getSolverData, setSolverData!\nsolvable::Base.RefValue{Int64}\nSolvable flag for the factor. Accessors: getSolvable, setSolvable!\n_variableOrderSymbols::Tuple{Vararg{Symbol, N}} where N\nInternal cache of the ordering of the neighbor variables. Rather use getVariableOrder to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.DFGFactor-Union{Tuple{T}, Tuple{Symbol, Union{Dates.DateTime, TimeZones.ZonedDateTime}, Dates.Nanosecond, Set{Symbol}, GenericFunctionNodeData{T}, Int64, Tuple}} where T","page":"Function Reference","title":"DistributedFactorGraphs.DFGFactor","text":"DFGFactor(label, timestamp, nstime, tags, solverData, solvable, _variableOrderSymbols)\n\n\nConstruct a DFG factor given a label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.DFGFactorSummary","page":"Function Reference","title":"DistributedFactorGraphs.DFGFactorSummary","text":"struct DFGFactorSummary <: AbstractDFGFactor\n\nRead-only summary factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::TimeZones.ZonedDateTime\nVariable timestamp. Accessors: getTimestamp\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\n_variableOrderSymbols::Vector{Symbol}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.GenericFunctionNodeData","page":"Function Reference","title":"DistributedFactorGraphs.GenericFunctionNodeData","text":"mutable struct GenericFunctionNodeData{T<:Union{AbstractFactor, AbstractPackedFactor, FactorOperationalMemory}}\n\nNotes\n\nS::Symbol\n\nDesigning (WIP)\n\nT <: Union{FactorOperationalMemory, PackedInferenceType}\nin IIF.CCW{T <: DFG.FunctorInferenceType}\nin DFG.AbstractRelativeMinimize <: FunctorInferenceType\nin Main.SomeFactor <: AbstractRelativeMinimize\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.SkeletonDFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.SkeletonDFGFactor","text":"struct SkeletonDFGFactor <: AbstractDFGFactor\n\nSkeleton factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\n_variableOrderSymbols::Vector{Symbol}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#Services-1","page":"Function Reference","title":"Services","text":"","category":"section"},{"location":"func_ref/#Abstract-DFG-2","page":"Function Reference","title":"Abstract DFG","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/AbstractDFG.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Tuple{G} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"Gets an empty and unique CloudGraphsDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG, F}} where F<:AbstractDFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.addFactor!","text":"Add a DFGFactor to a DFG.\n\naddFactor!(dfg, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG, Vector{Symbol}, F}} where F<:AbstractDFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.addFactor!","text":"addFactor!(dfg, variableLabels, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG, Vector{var\"#s37\"} where var\"#s37\"<:AbstractDFGVariable, F}} where F<:AbstractDFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.addFactor!","text":"addFactor!(dfg, variables, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addVariable!-Union{Tuple{V}, Tuple{G}, Tuple{G, V}} where {G<:AbstractDFG, V<:AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.addVariable!","text":"addVariable!(dfg, variable)\n\n\nAdd a DFGVariable to a DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.buildSubgraph-Union{Tuple{G}, Tuple{Type{G}, AbstractDFG, Vector{Symbol}}, Tuple{Type{G}, AbstractDFG, Vector{Symbol}, Int64}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.buildSubgraph","text":"buildSubgraph(, dfg, variableFactorLabels)\nbuildSubgraph(, dfg, variableFactorLabels, distance; solvable, sessionId, kwargs...)\n\n\nBuild a deep subgraph copy from the DFG given a list of variables and factors and an optional distance. Note: Orphaned factors (where the subgraph does not contain all the related variables) are not returned. Related:\n\ncopyGraph!\ngetNeighborhood\ndeepcopyGraph\nmergeGraph!\n\nDev Notes\n\nBulk vs node for node: a list of labels are compiled and the sugraph is copied in bulk.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.copyGraph!-Tuple{AbstractDFG, AbstractDFG, Vector{Symbol}, Vector{Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.copyGraph!","text":"copyGraph!(destDFG, sourceDFG, variableLabels, factorLabels; copyGraphMetadata, overwriteDest, deepcopyNodes, verbose)\n\n\nCommon function for copying nodes from one graph into another graph. This is overridden in specialized implementations for performance. Orphaned factors are not added, with a warning if verbose. Set overwriteDest to overwrite existing variables and factors in the destination DFG. NOTE: copyGraphMetadata not supported yet. Related:\n\ndeepcopyGraph\ndeepcopyGraph!\nbuildSubgraph\ngetNeighborhood\nmergeGraph!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deepcopyGraph!","page":"Function Reference","title":"DistributedFactorGraphs.deepcopyGraph!","text":"deepcopyGraph!(destDFG, sourceDFG)\ndeepcopyGraph!(destDFG, sourceDFG, variableLabels)\ndeepcopyGraph!(destDFG, sourceDFG, variableLabels, factorLabels; kwargs...)\n\n\nCopy nodes from one graph into another graph by making deepcopies. see copyGraph! for more detail. Related:\n\ndeepcopyGraph\nbuildSubgraph\ngetNeighborhood\nmergeGraph!\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deepcopyGraph-Union{Tuple{T}, Tuple{Type{T}, AbstractDFG}, Tuple{Type{T}, AbstractDFG, Vector{Symbol}}, Tuple{Type{T}, AbstractDFG, Vector{Symbol}, Vector{Symbol}}} where T<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.deepcopyGraph","text":"deepcopyGraph(, sourceDFG)\ndeepcopyGraph(, sourceDFG, variableLabels)\ndeepcopyGraph(, sourceDFG, variableLabels, factorLabels; sessionId, kwargs...)\n\n\nCopy nodes from one graph into a new graph by making deepcopies. see copyGraph! for more detail. Related:\n\ndeepcopyGraph!\nbuildSubgraph\ngetNeighborhood\nmergeGraph!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteFactor!-Union{Tuple{F}, Tuple{G}, Tuple{G, F}} where {G<:AbstractDFG, F<:AbstractDFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.deleteFactor!","text":"deleteFactor!(dfg, factor)\n\n\nDelete the referened DFGFactor from the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteFactor!-Union{Tuple{G}, Tuple{G, Symbol}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.deleteFactor!","text":"deleteFactor!(dfg, label)\n\n\nDelete a DFGFactor from the DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariable!-Tuple{AbstractDFG, AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.deleteVariable!","text":"deleteVariable!(dfg, variable)\n\n\nDelete a referenced DFGVariable from the DFG.\n\nNotes\n\nReturns Tuple{AbstractDFGVariable, Vector{<:AbstractDFGFactor}}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariable!-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.deleteVariable!","text":"deleteVariable!(dfg, label)\n\n\nDelete a DFGVariable from the DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.exists-Tuple{AbstractDFG, DFGNode}","page":"Function Reference","title":"DistributedFactorGraphs.exists","text":"exists(dfg, node)\n\n\nTrue if the variable or factor exists in the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.findClosestTimestamp-Union{Tuple{T}, Tuple{S}, Tuple{Array{Tuple{TimeZones.ZonedDateTime, T}, 1}, Array{Tuple{TimeZones.ZonedDateTime, S}, 1}}} where {S, T}","page":"Function Reference","title":"DistributedFactorGraphs.findClosestTimestamp","text":"findClosestTimestamp(setA, setB)\n\n\nFind and return the closest timestamp from two sets of Tuples.  Also return the minimum delta-time (::Millisecond) and how many elements match from the two sets are separated by the minimum delta-time.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.findFactorsBetweenNaive","page":"Function Reference","title":"DistributedFactorGraphs.findFactorsBetweenNaive","text":"findFactorsBetweenNaive(dfg, from, to)\nfindFactorsBetweenNaive(dfg, from, to, assertSingles)\n\n\nRelatively naive function counting linearly from-to\n\nDevNotes\n\nConvert to using LightGraphs shortest path methods instead.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.findVariableNearTimestamp","page":"Function Reference","title":"DistributedFactorGraphs.findVariableNearTimestamp","text":"findVariableNearTimestamp(dfg, timest)\nfindVariableNearTimestamp(dfg, timest, regexFilter; tags, solvable, warnDuplicate, number)\n\n\nFind and return nearest variable labels per delta time.  Function will filter on regexFilter, tags, and solvable.\n\nNotes\n\nReturns Vector{Tuple{Vector{Symbol}, Millisecond}}\n\nDevNotes:\n\nTODO number should allow returning more than one for k-nearest matches.\nFuture versions likely will require some optimization around the internal getVariable call.\nPerhaps a dedicated/efficient getVariableTimestamp for all DFG flavors.\n\nRelated\n\nls, listVariables, findClosestTimestamp\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getAddHistory-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getAddHistory","text":"getAddHistory(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBiadjacencyMatrix-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getBiadjacencyMatrix","text":"getBiadjacencyMatrix(dfg; solvable)\n\n\nGet a matrix indicating adjacency between variables and factors. Returned as a named tuple: B::SparseMatrixCSC{Int}, varLabels::Vector{Symbol) facLabels::Vector{Symbol). Rows are the factors, columns are the variables, with the corresponding labels in varLabels,facLabels.\n\nNotes\n\nReturns ::NamedTuple{(:B, :varLabels, :facLabels), Tuple{SparseMatrixCSC, Vector{Symbol}, Vector{Symbol}}}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDFGInfo-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getDFGInfo","text":"getDFGInfo(dfg)\n\n\nConvenience function to get all the metadata of a DFG\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDescription-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getDescription","text":"getDescription(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactor-Union{Tuple{G}, Tuple{G, Union{String, Symbol}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getFactor","text":"Get a DFGFactor from a DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactors-Union{Tuple{G}, Tuple{G, Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getFactors","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getNeighborhood-Tuple{AbstractDFG, Symbol, Int64}","page":"Function Reference","title":"DistributedFactorGraphs.getNeighborhood","text":"getNeighborhood(dfg, label, distance)\n\n\nBuild a list of all unique neighbors inside 'distance'\n\nNotes\n\nReturns Vector{Symbol}\n\nRelated:\n\ncopyGraph!\nbuildSubgraph\ndeepcopyGraph\nmergeGraph!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getNeighbors-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.getNeighbors","text":"getNeighbors(dfg, label; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobotData-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getRobotData","text":"getRobotData(dfg)\n\n\nGet the robot data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobotId-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getRobotId","text":"getRobotId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSessionData-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getSessionData","text":"getSessionData(dfg)\n\n\nGet the session data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSessionId-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getSessionId","text":"getSessionId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverParams-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getSolverParams","text":"getSolverParams(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSummary-Tuple{G} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getSummary","text":"Get a summary of the graph (first-class citizens of variables and factors). Returns a DFGSummary.\n\nNotes\n\nReturns ::DFGSummary\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSummaryGraph-Tuple{G} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getSummaryGraph","text":"Get a summary graph (first-class citizens of variables and factors) with the same structure as the original graph.\n\nNotes\n\nthis is a copy of the original.\nReturns ::LightDFG{NoSolverParams, DFGVariableSummary, DFGFactorSummary}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUserData-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getUserData","text":"getUserData(dfg)\n\n\nGet the user data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUserId-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getUserId","text":"getUserId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariable-Tuple{AbstractDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label, solveKey)\n\n\nGet a DFGVariable with a specific solver key. In memory types still return a reference, other types returns a variable with only solveKey.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariable-Union{Tuple{G}, Tuple{G, Union{String, Symbol}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label)\n\n\nGet a DFGVariable from a DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariables-Union{Tuple{G}, Tuple{G, Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getVariables","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasTags-Tuple{AbstractDFG, Symbol, Vector{Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.hasTags","text":"hasTags(dfg, sym, tags; matchAll)\n\n\nDetermine if the variable or factor neighbors have the tags:;Vector{Symbol}, and matchAll::Bool.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasTagsNeighbors-Tuple{AbstractDFG, Symbol, Vector{Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.hasTagsNeighbors","text":"hasTagsNeighbors(dfg, sym, tags; matchAll)\n\n\nDetermine if the variable or factor neighbors have the tags:;Vector{Symbol}, and matchAll::Bool.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isConnected-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.isConnected","text":"isConnected(dfg)\n\n\nChecks if the graph is fully connected, returns true if so.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isFactor-Union{Tuple{G}, Tuple{G, Symbol}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.isFactor","text":"Return whether sym::Symbol represents a factor vertex in the graph DFG. Checks whether it both exists in the graph and is a factor. (If you rather want a quicker for type, just do node isa DFGFactor)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isPathFactorsHomogeneous-Tuple{AbstractDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.isPathFactorsHomogeneous","text":"isPathFactorsHomogeneous(dfg, from, to)\n\n\nReturn (::Bool,::Vector{TypeName}) of types between two nodes in the factor graph \n\nDevNotes\n\nOnly works on LigthDFG at the moment.\n\nRelated\n\nLightDFG.findShortestPathDijkstra\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isVariable-Union{Tuple{G}, Tuple{G, Symbol}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.isVariable","text":"Return whether sym::Symbol represents a variable vertex in the graph DFG. Checks whether it both exists in the graph and is a variable. (If you rather want a quick for type, just do node isa DFGVariable)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listFactors-Union{Tuple{G}, Tuple{G, Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.listFactors","text":"Get a list of the IDs (labels) of the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listSolveKeys","page":"Function Reference","title":"DistributedFactorGraphs.listSolveKeys","text":"listSolveKeys(variable::DFGVariable) -> Set{Symbol}\nlistSolveKeys(variable::DFGVariable, filterSolveKeys::Union{Nothing, Regex}) -> Set{Symbol}\nlistSolveKeys(variable::DFGVariable, filterSolveKeys::Union{Nothing, Regex}, skeys::Any) -> Any\n\n\nList all the solvekeys used amongst all variables in the distributed factor graph object.\n\nRelated\n\nlistSupersolves, getSolverDataDict, listVariables\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.listVariables","page":"Function Reference","title":"DistributedFactorGraphs.listVariables","text":"listVariables(dfg)\nlistVariables(dfg, regexFilter; tags, solvable)\n\n\nGet a list of IDs of the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\nNOtes\n\nReturns ::Vector{Symbol}\n\nExample\n\nlistVariables(dfg, r\"l\", tags=[:APRILTAG;])\n\nRelated:\n\nls\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.ls-Union{Tuple{G}, Tuple{G, Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.ls","text":"ls(dfg)\nls(dfg, regexFilter; tags, solvable)\n\n\nList the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\nNotes:\n\nReturns Vector{Symbol}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.ls-Union{Tuple{T}, Tuple{G}, Tuple{G, T}} where {G<:AbstractDFG, T<:DFGNode}","page":"Function Reference","title":"DistributedFactorGraphs.ls","text":"ls(dfg)\nls(dfg, node; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.ls2-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.ls2","text":"ls2(dfg, label)\n\n\nHelper to return neighbors at distance 2 around a given node label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsTypes-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.lsTypes","text":"lsTypes(dfg)\n\n\nReturn Vector{Symbol} of all unique variable types in factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsTypesDict-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.lsTypesDict","text":"lsTypesDict(dfg)\n\n\nReturn ::Dict{Symbol, Vector{Symbol}} of all unique variable types with labels in a factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsWho-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.lsWho","text":"lsWho(dfg, type)\n\n\nGives back all factor labels that fit the bill:     lsWho(dfg, :Pose3)\n\nNotes\n\nReturns Vector{Symbol}\n\nDev Notes\n\nCloud versions will benefit from less data transfer\nls(dfg::C, ::T) where {C <: CloudDFG, T <: ..}\n\nRelated\n\nls, lsf, lsfPriors\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsf-Union{Tuple{G}, Tuple{G, Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.lsf","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\nNotes\n\nReturn Vector{Symbol}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfPriors-Tuple{G} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.lsfPriors","text":"Return vector of prior factor symbol labels in factor graph dfg.\n\nNotes:\n\nReturns Vector{Symbol}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfTypes-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.lsfTypes","text":"lsfTypes(dfg)\n\n\nReturn Vector{Symbol} of all unique factor types in factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfTypesDict-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.lsfTypesDict","text":"lsfTypesDict(dfg)\n\n\nReturn ::Dict{Symbol, Vector{Symbol}} of all unique factors types with labels in a factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfWho-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.lsfWho","text":"lsfWho(dfg, type)\n\n\nGives back all factor labels that fit the bill:     lsfWho(dfg, :Point2Point2)\n\nNotes\n\nReturns Vector{Symbol}\n\nDev Notes\n\nCloud versions will benefit from less data transfer\nls(dfg::C, ::T) where {C <: CloudDFG, T <: ..}\n\nRelated\n\nls, lsf, lsfPriors\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeGraph!","page":"Function Reference","title":"DistributedFactorGraphs.mergeGraph!","text":"mergeGraph!(destDFG, sourceDFG)\nmergeGraph!(destDFG, sourceDFG, variableLabels)\nmergeGraph!(destDFG, sourceDFG, variableLabels, factorLabels)\nmergeGraph!(destDFG, sourceDFG, variableLabels, factorLabels, distance; solvable, kwargs...)\n\n\nMerger sourceDFG to destDFG given an optional list of variables and factors and distance. Notes:\n\nNodes already in the destination graph are updated from sourceDFG.\nOrphaned factors (where the subgraph does not contain all the related variables) are not included.\n\nRelated:\n\ncopyGraph!\nbuildSubgraph\ngetNeighborhood\ndeepcopyGraph\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.mergeGraphVariableData!-Union{Tuple{H}, Tuple{G}, Tuple{H, G, Vector{Symbol}}} where {G<:AbstractDFG, H<:AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.mergeGraphVariableData!","text":"mergeGraphVariableData!(destDFG, sourceDFG, varSyms)\n\n\nCommon function to update all solver data and estimates from one graph to another. This should be used to push local solve data back into a cloud graph, for example.\n\nNotes\n\nReturns ::Nothing\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeVariableData!-Tuple{AbstractDFG, AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.mergeVariableData!","text":"mergeVariableData!(dfg, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.rebuildFactorMetadata!-Tuple{AbstractDFG{var\"#s37\"} where var\"#s37\"<:AbstractParams, AbstractDFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.rebuildFactorMetadata!","text":"rebuildFactorMetadata!(dfg, factor)\n\n\nMethod must be overloaded by the user for Serialization to work.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setDescription!-Tuple{AbstractDFG, String}","page":"Function Reference","title":"DistributedFactorGraphs.setDescription!","text":"setDescription!(dfg, description)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setRobotData!-Tuple{AbstractDFG, Dict{Symbol, String}}","page":"Function Reference","title":"DistributedFactorGraphs.setRobotData!","text":"setRobotData!(dfg, data)\n\n\nSet the robot data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSessionData!-Tuple{AbstractDFG, Dict{Symbol, String}}","page":"Function Reference","title":"DistributedFactorGraphs.setSessionData!","text":"setSessionData!(dfg, data)\n\n\nSet the session data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setUserData!-Tuple{AbstractDFG, Dict{Symbol, String}}","page":"Function Reference","title":"DistributedFactorGraphs.setUserData!","text":"setUserData!(dfg, data)\n\n\nSet the user data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.toDot-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.toDot","text":"toDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\nNotes\n\nReturns ::String\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.toDotFile","page":"Function Reference","title":"DistributedFactorGraphs.toDotFile","text":"toDotFile(dfg)\ntoDotFile(dfg, fileName)\n\n\nProduces a dot file of the graph for visualization. Download XDot to see the data\n\nNote\n\nDefault location \"/tmp/dfg.dot\" – MIGHT BE REMOVED\nCan be viewed with the xdot system application.\nBased on graphviz.org\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateFactor!-Union{Tuple{F}, Tuple{G}, Tuple{G, F}} where {G<:AbstractDFG, F<:AbstractDFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.updateFactor!","text":"Update a complete DFGFactor in the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateVariable!-Union{Tuple{V}, Tuple{G}, Tuple{G, V}} where {G<:AbstractDFG, V<:AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.updateVariable!","text":"Update a complete DFGVariable in the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getAdjacencyMatrixSymbols-Tuple{AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.getAdjacencyMatrixSymbols","text":"getAdjacencyMatrixSymbols(dfg; solvable)\n\n\nGet a matrix indicating relationships between variables and factors. Rows are all factors, columns are all variables, and each cell contains either nothing or the symbol of the relating factor. The first row and first column are factor and variable headings respectively. Note:\n\nrather use getBiadjacencyMatrix\nReturns either of ::Matrix{Union{Nothing, Symbol}}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactorOperationalMemoryType-Tuple{Any}","page":"Function Reference","title":"DistributedFactorGraphs.getFactorOperationalMemoryType","text":"getFactorOperationalMemoryType(dummy)\n\n\nMethod must be overloaded by the user for Serialization to work.  E.g. IncrementalInference uses CommonConvWrapper <: FactorOperationalMemory.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setRobotId!-Tuple{AbstractDFG, String}","page":"Function Reference","title":"DistributedFactorGraphs.setRobotId!","text":"setRobotId!(dfg, robotId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSessionId!-Tuple{AbstractDFG, String}","page":"Function Reference","title":"DistributedFactorGraphs.setSessionId!","text":"setSessionId!(dfg, sessionId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setUserId!-Tuple{AbstractDFG, String}","page":"Function Reference","title":"DistributedFactorGraphs.setUserId!","text":"setUserId!(dfg, userId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#Common-Accessors-1","page":"Function Reference","title":"Common Accessors","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Common Accessors to both variable and factor nodes","category":"page"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/CommonAccessors.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.emptyTags!-Tuple{LightDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.emptyTags!","text":"emptyTags!(dfg, sym)\n\n\nEmpty all tags from the node (empty)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getLabel-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getLabel","text":"getLabel(v)\n\n\nReturn the label for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolvable-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(dfg, sym)\n\n\nGet 'solvable' parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolvable-Tuple{Union{DFGFactor, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(var)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition.  Useful for ensuring atomic transactions.\n\nRelated:\n\nisSolveInProgress\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolveInProgress","page":"Function Reference","title":"DistributedFactorGraphs.getSolveInProgress","text":"getSolveInProgress(var)\ngetSolveInProgress(var, solveKey)\n\n\nWhich variables or factors are currently being used by an active solver.  Useful for ensuring atomic transactions.\n\nDevNotes:\n\nWill be renamed to data.solveinprogress which will be in VND, not DFGNode – see DFG #201\n\nRelated\n\nisSolvable\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getTags-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getTags","text":"getTags(v)\n\n\nReturn the tags for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getTimestamp-Tuple{Union{DFGFactorSummary, DFGVariableSummary, DFGFactor, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getTimestamp","text":"getTimestamp(v)\n\n\nGet the timestamp of a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isSolvable-Tuple{Union{DFGFactor, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.isSolvable","text":"isSolvable(node)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition. returns true if getSolvable > 0 Related:\n\ngetSolvable(@ref)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listTags-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.listTags","text":"listTags(dfg, sym)\n\n\nReturn the tags for a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeTags!-Tuple{LightDFG, Symbol, Vector{Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.mergeTags!","text":"mergeTags!(dfg, sym, tags)\n\n\nMerge add tags to a variable or factor (union)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.removeTags!-Tuple{LightDFG, Symbol, Vector{Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.removeTags!","text":"removeTags!(dfg, sym, tags)\n\n\nRemove the tags from the node (setdiff)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvable!-Tuple{AbstractDFG, Symbol, Int64}","page":"Function Reference","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(dfg, sym, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvable!-Union{Tuple{N}, Tuple{N, Int64}} where N<:DFGNode","page":"Function Reference","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(node, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setTags!-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable}, Union{Set{Symbol}, Vector{Symbol}}}","page":"Function Reference","title":"DistributedFactorGraphs.setTags!","text":"setTags!(f, tags)\n\n\nSet the tags for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setTimestamp!-Tuple{AbstractDFG, Symbol, TimeZones.ZonedDateTime}","page":"Function Reference","title":"DistributedFactorGraphs.setTimestamp!","text":"setTimestamp!(dfg, lbl, ts)\n\n\nSet the timestamp of a Variable/Factor object in a factor graph. Note: Since timestamp is not mutable setTimestamp! calls updateVariable! internally. See also setTimestamp\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DFG-Variable-Accessors-CRUD-and-SET-opperations-1","page":"Function Reference","title":"DFG Variable Accessors CRUD and SET opperations","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/DFGVariable.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.addPPE!","page":"Function Reference","title":"DistributedFactorGraphs.addPPE!","text":"addPPE!(dfg, sourceVariable)\naddPPE!(dfg, sourceVariable, ppekey)\n\n\nAdd a new PPE entry from a deepcopy of the source variable PPE. NOTE: Copies the PPE.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addPPE!-Union{Tuple{P}, Tuple{AbstractDFG, Symbol, P}} where P<:AbstractPointParametricEst","page":"Function Reference","title":"DistributedFactorGraphs.addPPE!","text":"addPPE!(dfg, variablekey, ppe)\n\n\nAdd variable PPE, errors if it already exists.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addSmallData!-Tuple{AbstractDFG, Symbol, Pair{Symbol, var\"#s259\"} where var\"#s259\"<:Union{Bool, Float64, Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}, Vector{String}, String}}","page":"Function Reference","title":"DistributedFactorGraphs.addSmallData!","text":"addSmallData!(dfg, label, pair)\n\n\nAdd a small data pair key=>value for variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addVariableSolverData!","page":"Function Reference","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, sourceVariable)\naddVariableSolverData!(dfg, sourceVariable, solveKey)\n\n\nAdd a new solver data  entry from a deepcopy of the source variable solver data. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addVariableSolverData!-Tuple{AbstractDFG, Symbol, VariableNodeData}","page":"Function Reference","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, variablekey, vnd)\n\n\nAdd variable solver data, errors if it already exists.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deepcopySolvekeys!-Tuple{AbstractDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.deepcopySolvekeys!","text":"deepcopySolvekeys!(dfg, dest, src; solvable, labels, verbose)\n\n\nDuplicate a supersolve (solveKey).\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deletePPE!","page":"Function Reference","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, sourceVariable)\ndeletePPE!(dfg, sourceVariable, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deletePPE!","page":"Function Reference","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, variablekey)\ndeletePPE!(dfg, variablekey, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteSmallData!-Tuple{AbstractDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.deleteSmallData!","text":"deleteSmallData!(dfg, label, key)\n\n\nDelete a small data entry at key for variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Function Reference","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, sourceVariable)\ndeleteVariableSolverData!(dfg, sourceVariable, solveKey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Function Reference","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, variablekey)\ndeleteVariableSolverData!(dfg, variablekey, solveKey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.emptySmallData!-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.emptySmallData!","text":"emptySmallData!(dfg, label)\n\n\nEmpty all small data from variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDimension","page":"Function Reference","title":"DistributedFactorGraphs.getDimension","text":"Interface function to return the variableType dimension of an InferenceVariable, extend this function for all Types<:InferenceVariable.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getLastUpdatedTimestamp-Tuple{AbstractPointParametricEst}","page":"Function Reference","title":"DistributedFactorGraphs.getLastUpdatedTimestamp","text":"getLastUpdatedTimestamp(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getManifold-Tuple{DFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.getManifold","text":"getManifold(vari)\n\n\nInterface function to return the <:ManifoldsBase.AbstractManifold object of variableType<:InferenceVariable, extend this function for all Types<:InferenceVariable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getPPE","page":"Function Reference","title":"DistributedFactorGraphs.getPPE","text":"getPPE(vari)\ngetPPE(vari, solveKey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated\n\ngetMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getPPE","page":"Function Reference","title":"DistributedFactorGraphs.getPPE","text":"getPPE(dfg, variablekey)\ngetPPE(dfg, variablekey, ppekey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph for a given solve key.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated getMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getPPEDict-Tuple{Union{DFGVariableSummary, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getPPEDict","text":"getPPEDict(v)\n\n\nGet the PPE dictionary for a variable.  Recommended to use CRUD operations instead, getPPE, addPPE!, updatePPE!, deletePPE!.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getPPEMax-Tuple{AbstractPointParametricEst}","page":"Function Reference","title":"DistributedFactorGraphs.getPPEMax","text":"getPPEMax(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getPPEMean-Tuple{AbstractPointParametricEst}","page":"Function Reference","title":"DistributedFactorGraphs.getPPEMean","text":"getPPEMean(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getPPESuggested-Tuple{AbstractPointParametricEst}","page":"Function Reference","title":"DistributedFactorGraphs.getPPESuggested","text":"getPPESuggested(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSmallData-Tuple{AbstractDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.getSmallData","text":"getSmallData(dfg, label, key)\n\n\nGet the small data entry at key for variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSmallData-Tuple{DFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.getSmallData","text":"getSmallData(v)\n\n\nGet the small data for a variable. Note: Rather use SmallData CRUD\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolvedCount-Tuple{VariableNodeData}","page":"Function Reference","title":"DistributedFactorGraphs.getSolvedCount","text":"getSolvedCount(v)\n\n\nGet the number of times a variable has been inferred – i.e. solvedCount.\n\nRelated\n\nisSolved, setSolvedCount!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverData","page":"Function Reference","title":"DistributedFactorGraphs.getSolverData","text":"getSolverData(v)\ngetSolverData(v, key)\n\n\nRetrieve solver data structure stored in a variable.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getSolverDataDict-Tuple{DFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.getSolverDataDict","text":"getSolverDataDict(v)\n\n\nGet solver data dictionary for a variable.  Advised to use graph CRUD operations instead.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariablePPEDict-Tuple{Union{DFGVariableSummary, DFGVariable}}","page":"Function Reference","title":"DistributedFactorGraphs.getVariablePPEDict","text":"getVariablePPEDict(vari)\n\n\nReturn full dictionary of PPEs in a variable, recommended to rather use CRUD: getPPE,\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariableSolverData","page":"Function Reference","title":"DistributedFactorGraphs.getVariableSolverData","text":"getVariableSolverData(dfg, variablekey)\ngetVariableSolverData(dfg, variablekey, solvekey)\n\n\nGet variable solverdata for a given solve key.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getVariableType-Union{Tuple{DFGVariable{T}}, Tuple{T}} where T<:InferenceVariable","page":"Function Reference","title":"DistributedFactorGraphs.getVariableType","text":"getVariableType(v)\n\n\nVariable nodes variableType information holding a variety of meta data associated with the type of variable stored in that node of the factor graph.\n\nDevWork\n\nTODO, see IncrementalInference.jl 1228\n\nRelated\n\ngetVariableType\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariableTypeName-Tuple{DFGVariableSummary}","page":"Function Reference","title":"DistributedFactorGraphs.getVariableTypeName","text":"getVariableTypeName(v)\n\n\nRetrieve the soft type name symbol for a DFGVariableSummary. ie :Point2, Pose2, etc.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isInitialized","page":"Function Reference","title":"DistributedFactorGraphs.isInitialized","text":"isInitialized(var)\nisInitialized(var, key)\n\n\nReturns state of variable data .initialized flag.\n\nNotes:\n\nused by both factor graph variable and Bayes tree clique logic.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.isSolved-Tuple{VariableNodeData}","page":"Function Reference","title":"DistributedFactorGraphs.isSolved","text":"isSolved(v)\n\n\nBoolean on whether the variable has been solved.\n\nRelated\n\ngetSolved, setSolved!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listPPEs-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.listPPEs","text":"listPPEs(dfg, variablekey)\n\n\nList all the PPE data keys in the variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listSmallData-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.listSmallData","text":"listSmallData(dfg, label)\n\n\nList all small data keys for a variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listVariableSolverData-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.listVariableSolverData","text":"listVariableSolverData(dfg, variablekey)\n\n\nList all the solver data keys in the variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergePPEs!-Tuple{AbstractDFGVariable, AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.mergePPEs!","text":"mergePPEs!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeVariableSolverData!-Tuple{DFGVariable, DFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.mergeVariableSolverData!","text":"mergeVariableSolverData!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). If the same key is present in another collection, the value for that key will be the value it has in the last collection listed (updated). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSmallData!-Tuple{DFGVariable, Dict{Symbol, Union{Bool, Float64, Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}, Vector{String}, String}}}","page":"Function Reference","title":"DistributedFactorGraphs.setSmallData!","text":"setSmallData!(v, smallData)\n\n\nSet the small data for a variable. This will overwrite old smallData. Note: Rather use SmallData CRUD\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvedCount!-Tuple{VariableNodeData, Int64}","page":"Function Reference","title":"DistributedFactorGraphs.setSolvedCount!","text":"setSolvedCount!(v, val)\n\n\nUpdate/set the solveCount value.\n\nRelated\n\ngetSolved, isSolved\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolverData!","page":"Function Reference","title":"DistributedFactorGraphs.setSolverData!","text":"setSolverData!(v, data)\nsetSolverData!(v, data, key)\n\n\nSet solver data structure stored in a variable.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.setTimestamp-Tuple{DFGVariable, TimeZones.ZonedDateTime}","page":"Function Reference","title":"DistributedFactorGraphs.setTimestamp","text":"setTimestamp(v, ts; verbose)\n\n\nSet the timestamp of a DFGVariable object returning a new DFGVariable. Note: Since the timestamp field is not mutable setTimestamp returns a new variable with the updated timestamp (note the absence of !). Use updateVariable! on the returened variable to update it in the factor graph if needed. Alternatively use setTimestamp!. See issue #315.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!","page":"Function Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, sourceVariable)\nupdatePPE!(dfg, sourceVariable, ppekey; warn_if_absent)\n\n\nUpdate PPE data if it exists, otherwise add it. NOTE: Copies the PPE data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!","page":"Function Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, sourceVariables)\nupdatePPE!(dfg, sourceVariables, ppekey; warn_if_absent)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!-Tuple{AbstractDFG, Symbol, AbstractPointParametricEst}","page":"Function Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, variablekey, ppe; warn_if_absent)\n\n\nUpdate PPE data if it exists, otherwise add it – one call per key::Symbol=:default.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateSmallData!-Tuple{AbstractDFG, Symbol, Pair{Symbol, var\"#s256\"} where var\"#s256\"<:Union{Bool, Float64, Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}, Vector{String}, String}}","page":"Function Reference","title":"DistributedFactorGraphs.updateSmallData!","text":"updateSmallData!(dfg, label, pair; warn_if_absent)\n\n\nUpdate a small data pair key=>value for variable label in dfg\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateVariableSolverData!","page":"Function Reference","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, variablekey, vnd)\nupdateVariableSolverData!(dfg, variablekey, vnd, useCopy)\nupdateVariableSolverData!(dfg, variablekey, vnd, useCopy, fields; warn_if_absent)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\nNotes:\n\nuseCopy=true to copy solver data and keep separate memory.\nUse fields to updated only a few VND.fields while adhering to useCopy.\n\nRelated\n\nmergeVariableSolverData!\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.@defVariable-Tuple{Any, Any}","page":"Function Reference","title":"DistributedFactorGraphs.@defVariable","text":"@defVariable StructName manifolds<:ManifoldsBase.AbstractManifold\n\nA macro to create a new variable with name StructName and manifolds.  Note that  the manifolds is an object and must be a subtype of ManifoldsBase.AbstractManifold. See documentation in Manifolds.jl on making your own. \n\nExample:\n\nDFG.@defVariable Pose2 SpecialEuclidean(2)\n\n\n\n\n\n","category":"macro"},{"location":"func_ref/#DFG-Factor-Accessors-CRUD-and-SET-opperations-1","page":"Function Reference","title":"DFG Factor Accessors CRUD and SET opperations","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/DFGFactor.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.getFactorFunction-Tuple{GenericFunctionNodeData}","page":"Function Reference","title":"DistributedFactorGraphs.getFactorFunction","text":"getFactorFunction(fcd)\n\n\nReturn reference to the user factor in <:AbstractDFG identified by ::Symbol.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactorType-Tuple{GenericFunctionNodeData}","page":"Function Reference","title":"DistributedFactorGraphs.getFactorType","text":"getFactorType(data)\n\n\nReturn user factor type from factor graph identified by label ::Symbol.\n\nNotes\n\nReplaces older getfnctype.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverData-Tuple{F} where F<:DFGFactor","page":"Function Reference","title":"DistributedFactorGraphs.getSolverData","text":"getSolverData(f)\n\n\nRetrieve solver data structure stored in a factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariableOrder-Tuple{DFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.getVariableOrder","text":"getVariableOrder(fct)\n\n\nGet the variable ordering for this factor. Should be equivalent to getNeighbors unless something was deleted in the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isPrior-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.isPrior","text":"isPrior(dfg, fc)\n\n\nReturn ::Bool on whether given factor fc::Symbol is a prior in factor graph dfg.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getPriorType-Tuple{Type{var\"#s259\"} where var\"#s259\"<:InferenceVariable}","page":"Function Reference","title":"DistributedFactorGraphs._getPriorType","text":"_getPriorType(_type)\n\n\nIf you know a variable is ::Type{<:Pose2} but want to find its default prior ::Type{<:PriorPose2}.\n\nAssumptions\n\nThe prior type will be defined in the same module as the variable type.\nNot exported per default, but can be used with knowledge of the caveats.\n\nExample\n\nusing RoME\n@assert RoME.PriorPose2 == DFG._getPriorType(Pose2)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#Printing-1","page":"Function Reference","title":"Printing","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/CustomPrinting.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.printFactor-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.printFactor","text":"printFactor(dfg, sym; kwargs...)\n\n\nDisplay and return to console the user factor identified by tag name.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.printVariable-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.printVariable","text":"printVariable(dfg, sym; kwargs...)\n\n\nDisplay the content of VariableNodeData to console for a given factor graph and variable tag::Symbol.\n\nDev Notes\n\nTODO split as two show macros between AMP and DFG\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#Compare-Utilities-1","page":"Function Reference","title":"Compare Utilities","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/CompareUtils.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.compareAll-Union{Tuple{T}, Tuple{T, T}} where T<:Tuple","page":"Function Reference","title":"DistributedFactorGraphs.compareAll","text":"compareAll(Al, Bl; show, skip)\n\n\nRecursively compare the all fields of T that are not in skip for objects Al and Bl.\n\nTODO > add to func_ref.md\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareAllVariables-Union{Tuple{G2}, Tuple{G1}, Tuple{G1, G2}} where {G1<:AbstractDFG, G2<:AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.compareAllVariables","text":"compareAllVariables(fgA, fgB; skip, show, skipsamples)\n\n\nCompare all variables in both ::FactorGraphs A and B.\n\nNotes\n\nA and B should all the same variables and factors.\n\nRelated:\n\ncompareFactorGraphs, compareSimilarVariables, compareVariable, ls\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFactor-Tuple{DFGFactor, DFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.compareFactor","text":"compareFactor(A, B; show, skip, skipsamples, skipcompute)\n\n\nCompare that all fields are the same in a ::FactorGraph factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFactorGraphs-Union{Tuple{G2}, Tuple{G1}, Tuple{G1, G2}} where {G1<:AbstractDFG, G2<:AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.compareFactorGraphs","text":"Compare and return if two factor graph objects are the same, by comparing similar variables and factors.\n\nNotes:\n\nDefault items to skip with skipsamples, skipcompute.\nUser defined fields to skip can be specified with skip::Vector{Symbol}.\nTo enable debug messages for viewing which fields are not the same:\nhttps://stackoverflow.com/questions/53548681/how-to-enable-debugging-messages-in-juno-julia-editor\n\nRelated:\n\ncompareSimilarVariables, compareSimilarFactors, compareAllVariables, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFields-Union{Tuple{T}, Tuple{T, T}} where T","page":"Function Reference","title":"DistributedFactorGraphs.compareFields","text":"compareFields(Al, Bl; show, skip)\n\n\nCompare the all fields of T that are not in skip for objects Al and Bl.\n\nTODO > add to func_ref.md\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareSimilarFactors-Union{Tuple{G2}, Tuple{G1}, Tuple{G1, G2}} where {G1<:AbstractDFG, G2<:AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.compareSimilarFactors","text":"Compare similar factors between ::FactorGraphs A and B.\n\nRelated:\n\ncompareFactorGraphs, compareSimilarVariables, compareAllVariables, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareSimilarVariables-Union{Tuple{G2}, Tuple{G1}, Tuple{G1, G2}} where {G1<:AbstractDFG, G2<:AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.compareSimilarVariables","text":"Compare similar labels between ::FactorGraphs A and B.\n\nNotes\n\nAt least one variable label should exist in both A and B.\n\nRelated:\n\ncompareFactorGraphs, compareAllVariables, compareSimilarFactors, compareVariable, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareVariable-Tuple{DFGVariable, DFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.compareVariable","text":"compareVariable(A, B; skip, show, skipsamples)\n\n\nCompare that all fields are the same in a ::FactorGraph variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#Common-Functions-1","page":"Function Reference","title":"Common Functions","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"src/Common.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.getVariableLabelNumber","page":"Function Reference","title":"DistributedFactorGraphs.getVariableLabelNumber","text":"getVariableLabelNumber(vs)\ngetVariableLabelNumber(vs, prefix)\n\n\nSmall utility to return ::Int, e.g. 0 from getVariableLabelNumber(:x0)\n\nExamples\n\ngetVariableLabelNumber(:l10)          # 10\ngetVariableLabelNumber(:x1)           # 1\ngetVariableLabelNumber(:x1_10, \"x1_\") # 10\n\nDevNotes\n\nmake prefix Regex based for longer – i.e. :apriltag578, :lm1_4\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.isValidLabel-Tuple{Union{String, Symbol}}","page":"Function Reference","title":"DistributedFactorGraphs.isValidLabel","text":"isValidLabel(id)\n\n\nReturns true if the label is valid for a session, robot, or user ID.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.sortDFG-Tuple{Vector{var\"#s256\"} where var\"#s256\"<:DFGNode}","page":"Function Reference","title":"DistributedFactorGraphs.sortDFG","text":"sortDFG(vars; by, kwargs...)\n\n\nConvenience wrapper for Base.sort. Sort variable (factor) lists in a meaningful way (by timestamp, label, etc), for example [:april;:x1_3;:x1_6;] Defaults to sorting by timestamp for variables and factors and using natural_lt for Symbols. See Base.sort for more detail.\n\nNotes\n\nNot fool proof, but does better than native sort.\n\nExample\n\nsortDFG(ls(dfg)) sortDFG(ls(dfg), by=getLabel, lt=natural_lt)\n\nRelated\n\nls, lsf\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#Serialization-1","page":"Function Reference","title":"Serialization","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"services/Serialization.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.getTypeFromSerializationModule-Union{Tuple{G}, Tuple{G, Symbol}} where G<:AbstractDFG","page":"Function Reference","title":"DistributedFactorGraphs.getTypeFromSerializationModule","text":"Get a type from the serialization module inside DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DFG-Plots-[GraphPlot.jl]-1","page":"Function Reference","title":"DFG Plots [GraphPlot.jl]","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DFGPlots]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.DFGPlots.dfgplot","page":"Function Reference","title":"DistributedFactorGraphs.DFGPlots.dfgplot","text":"dfgplot(dfg)\ndfgplot(dfg, p)\n\n\nPlots the structure of the factor graph. GraphPlot must be imported before DistributedFactorGraphs for these functions to be available. Returns the plot context.\n\nE.g.\n\nusing GraphPlot\nusing DistributedFactorGraphs, DistributedFactorGraphs.DFGPlots\n# ... Make graph...\n# Using GraphViz plotting\ndfgplot(fg)\n# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(fg))\n\nMore information at GraphPlot.jl\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Drivers-1","page":"Function Reference","title":"Drivers","text":"","category":"section"},{"location":"func_ref/#LightDFGs-1","page":"Function Reference","title":"LightDFGs","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [LightDFGs]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG","page":"Function Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"An in-memory DistributedFactorGraph based on LightGraphs.jl with parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG-Union{Tuple{}, Tuple{DistributedFactorGraphs.LightDFGs.FactorGraphs.FactorGraph{Int64, DFGVariable, DFGFactor}}, Tuple{T}} where T<:AbstractParams","page":"Function Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"LightDFG()\nLightDFG(g; solverParams, kwargs...)\n\n\nCreate an in-memory LightDFG with the following parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG-Union{Tuple{}, Tuple{DistributedFactorGraphs.LightDFGs.FactorGraphs.FactorGraph{Int64, V, F}}, Tuple{F}, Tuple{V}, Tuple{T}} where {T<:AbstractParams, V<:AbstractDFGVariable, F<:AbstractDFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"LightDFG()\n\n\nCreate an in-memory LightDFG with the following parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.savedot_attributes-Tuple{IO, LightDFG}","page":"Function Reference","title":"DistributedFactorGraphs.LightDFGs.savedot_attributes","text":"savedot_attributes(io, dfg)\n\n\nA replacement for to_dot that saves only hardcoded factor graph plotting attributes.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Union{Tuple{LightDFG{P, V, F}}, Tuple{F}, Tuple{V}, Tuple{P}} where {P<:AbstractParams, V<:AbstractDFGVariable, F<:AbstractDFGFactor}","page":"Function Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"_getDuplicatedEmptyDFG(dfg)\n\n\nGets an empty and unique LightDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.findShortestPathDijkstra-Tuple{LightDFG, Symbol, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.findShortestPathDijkstra","text":"findShortestPathDijkstra(dfg, from, to; regexVariables, regexFactors, tagsVariables, tagsFactors, typeVariables, typeFactors, solvable, initialized)\n\n\nSpeciallized function available to only LightDFG at this time.\n\nNotes\n\nHas option for various types of filters (increases memory usage)\n\nExample\n\nusing IncrementalInference\n\n# canonical example graph as example\nfg = generateCanonicalFG_Kaess()\n\n@show path = findShortestPathDijkstra(fg, :x1, :x3)\n@show isVariable.(fg, path)\n@show isFactor.(fg, path)\n\nDevNotes\n\nTODO expand to other AbstractDFG entities.\nTODO use of filter resource consumption can be improved.\n\nRelated\n\nfindFactorsBetweenNaive, LightGraphs.dijkstra_shortest_paths\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#FileDFG-1","page":"Function Reference","title":"FileDFG","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\nPages = [\"FileDFG.jl\"]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.loadDFG!-Tuple{AbstractDFG, AbstractString}","page":"Function Reference","title":"DistributedFactorGraphs.loadDFG!","text":"loadDFG!(dfgLoadInto, dst)\n\n\nLoad a DFG from a saved folder. Always provide the IIF module as the second parameter.\n\nExample\n\nusing DistributedFactorGraphs, IncrementalInference\n# Create a DFG - can make one directly, e.g. LightDFG{NoSolverParams}() or use IIF:\ndfg = initfg()\n# Load the graph\nloadDFG!(dfg, \"/tmp/savedgraph.tar.gz\")\n# Use the DFG as you do normally.\nls(dfg)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.saveDFG-Tuple{AbstractString, AbstractDFG}","page":"Function Reference","title":"DistributedFactorGraphs.saveDFG","text":"saveDFG(folder, dfg)\n\n\nSave a DFG to a folder. Will create/overwrite folder if it exists.\n\nDevNotes:\n\nTODO remove compress kwarg.\n\nExample\n\nusing DistributedFactorGraphs, IncrementalInference\n# Create a DFG - can make one directly, e.g. LightDFG{NoSolverParams}() or use IIF:\ndfg = initfg()\n# ... Add stuff to graph using either IIF or DFG:\nv1 = addVariable!(dfg, :a, ContinuousScalar, tags = [:POSE], solvable=0)\n# Now save it:\nsaveDFG(dfg, \"/tmp/saveDFG.tar.gz\")\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#CloudGraphsDFGs-1","page":"Function Reference","title":"CloudGraphsDFGs","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [CloudGraphsDFGs]","category":"page"},{"location":"func_ref/#Data-Entries-and-Blobs-1","page":"Function Reference","title":"Data Entries and Blobs","text":"","category":"section"},{"location":"func_ref/#","page":"Function Reference","title":"Function Reference","text":"Modules = [DistributedFactorGraphs]\n\nPages = [\"entities/AbstractDataEntries.jl\",\n        \"services/AbstractDataEntries.jl\",\n        \"services/BlobStores.jl\",\n        \"services/DataEntryBlob.jl\",\n        \"services/FileDataEntryBlob.jl\",\n        \"services/InMemoryDataEntryBlob.jl\"]\n","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.BlobStoreEntry","page":"Function Reference","title":"DistributedFactorGraphs.BlobStoreEntry","text":"struct BlobStoreEntry <: AbstractDataEntry\n\nGenaral Data Store Entry.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.MongodbDataEntry","page":"Function Reference","title":"DistributedFactorGraphs.MongodbDataEntry","text":"struct MongodbDataEntry <: AbstractDataEntry\n\nData Entry in MongoDB.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.addDataEntry!-Tuple{AbstractDFG, Symbol, AbstractDataEntry}","page":"Function Reference","title":"DistributedFactorGraphs.addDataEntry!","text":"addDataEntry!(dfg, label, bde)\n\n\nAdd Data Entry to distributed factor graph. Should be extended if DFG variable is not returned by reference.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addDataEntry!-Tuple{AbstractDFGVariable, AbstractDataEntry}","page":"Function Reference","title":"DistributedFactorGraphs.addDataEntry!","text":"addDataEntry!(var, bde)\n\n\nAdd Data Entry to a DFG variable\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteDataEntry!-Tuple{AbstractDFGVariable, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.deleteDataEntry!","text":"deleteDataEntry!(var, key)\n\n\nDelete data entry from the factor graph. Note this doesn't remove it from any data stores.\n\nNotes:\n\nusers responsibility to delete data in db before deleting entry\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDataEntries-Tuple{AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.getDataEntries","text":"getDataEntries(var)\n\n\nGet data entries, Vector{AbstractDataEntry}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDataEntry-Tuple{AbstractDFGVariable, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.getDataEntry","text":"getDataEntry(var, key)\n\n\nGet data entry\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasDataEntry-Tuple{DFGVariable, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.hasDataEntry","text":"hasDataEntry(var, key)\n\n\nDoes a data entry (element) exist at key.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listDataEntries-Tuple{AbstractDFGVariable}","page":"Function Reference","title":"DistributedFactorGraphs.listDataEntries","text":"listDataEntries(var)\n\n\nlistDataEntries\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateDataEntry!-Tuple{AbstractDFGVariable, AbstractDataEntry}","page":"Function Reference","title":"DistributedFactorGraphs.updateDataEntry!","text":"updateDataEntry!(var, bde)\n\n\nUpdate data entry\n\nDevNote\n\nDF, unclear if update verb is applicable in this case, see #404\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addData!","page":"Function Reference","title":"DistributedFactorGraphs.addData!","text":"Add a data Entry and Blob to a distributed factor graph or BlobStore. Related addDataEntry!\n\naddData!(dfg, blobstore, label, entry, blob; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:73.\n\naddData!(dfg, blobstorekey, label, key, blob)\naddData!(dfg, blobstorekey, label, key, blob, timestamp; kwargs...)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:103.\n\naddData!(dfg, blobstore, label, key, blob)\naddData!(dfg, blobstore, label, key, blob, timestamp; description, mimeType, id, hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:111.\n\naddData!(dfg, label, entry, blob; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/DataEntryBlob.jl:122.\n\naddData!(, dfg, label, key, folder, blob)\naddData!(, dfg, label, key, folder, blob, timestamp; id, hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/FileDataEntryBlob.jl:95.\n\naddData!(dfg, label, entry; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/InMemoryDataEntryBlob.jl:32.\n\naddData!(, dfg, label, key, blob)\naddData!(, dfg, label, key, blob, timestamp; id, hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/InMemoryDataEntryBlob.jl:50.\n\naddData!(dfg, lbl, datastore, descr, mimeType, data)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/Deprecated.jl:58.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addDataBlob!","page":"Function Reference","title":"DistributedFactorGraphs.addDataBlob!","text":"Adds a blob to the blob store or dfg with the given entry.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteData!","page":"Function Reference","title":"DistributedFactorGraphs.deleteData!","text":"Delete a data entry and blob from the blob store or dfg. Related deleteDataEntry!\n\ndeleteData!(dfg, blobstore, label, entry)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:91.\n\ndeleteData!(dfg, blobstore, label, key)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:94.\n\ndeleteData!(dfg, label, key)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/DataEntryBlob.jl:136.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteDataBlob!","page":"Function Reference","title":"DistributedFactorGraphs.deleteDataBlob!","text":"Delete a blob to the blob store or dfg with the given entry.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getData","page":"Function Reference","title":"DistributedFactorGraphs.getData","text":"Get the data entry and blob for the specified blobstore or dfg retured as a tuple. Related getDataEntry\n\ngetData(dfg, blobstore, label, key; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:66.\n\ngetData(dfg, label, key; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/DataEntryBlob.jl:114.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getDataBlob","page":"Function Reference","title":"DistributedFactorGraphs.getDataBlob","text":"Get the data blob for the specified blobstore or dfg.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.listDataBlobs","page":"Function Reference","title":"DistributedFactorGraphs.listDataBlobs","text":"List all ids in the blob store.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateData!","page":"Function Reference","title":"DistributedFactorGraphs.updateData!","text":"Update a data entry or blob to the blob store or dfg. Related updateDataEntry!\n\nupdateData!(dfg, blobstore, label, entry, blob; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/BlobStores.jl:80.\n\nupdateData!(dfg, label, entry, blob; hashfunction)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/DataEntryBlob.jl:129.\n\nupdateData!(dfg, label, entry)\n\ndefined at /home/travis/build/JuliaRobotics/DistributedFactorGraphs.jl/src/DataBlobs/services/InMemoryDataEntryBlob.jl:39.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateDataBlob!","page":"Function Reference","title":"DistributedFactorGraphs.updateDataBlob!","text":"Update a blob to the blob store or dfg with the given entry.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.FileDataEntry","page":"Function Reference","title":"DistributedFactorGraphs.FileDataEntry","text":"struct FileDataEntry <: AbstractDataEntry\n\nData Entry in a file.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.InMemoryDataEntry","page":"Function Reference","title":"DistributedFactorGraphs.InMemoryDataEntry","text":"struct InMemoryDataEntry{T} <: AbstractDataEntry\n\nStore data temporary in memory. NOTE: Neither Entry nor Blob will be persisted.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.buildSourceString-Tuple{AbstractDFG, Symbol}","page":"Function Reference","title":"DistributedFactorGraphs.buildSourceString","text":"buildSourceString(dfg, label)\n\n\nFunction to generate source string - userId|robotId|sessionId|varLabel\n\n\n\n\n\n","category":"method"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DistributedFactorGraphs.jl provides a flexible factor graph API for use in the Caesar.jl ecosystem. The package supplies:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A standardized API for interacting with factor graphs\nImplementations of the API for in-memory and database-driven operation\nVisualization extensions to validate the underlying graph","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Note this package is still under initial development, and will adopt parts of the functionality currently contained in IncrementalInference.jl.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DistributedFactorGraphs can be installed from Julia packages using:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]add DistributedFactorGraphs","category":"page"},{"location":"#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\"\n    \"DataStructure.md\"\n    \"BuildingGraphs.md\"\n    \"GraphData.md\"\n    \"DrawingGraphs.md\"\n    \"ref_api.md\"\n    \"func_ref.md\"\n]","category":"page"},{"location":"ref_api/#Quick-API-Reference-1","page":"Quick API Reference","title":"Quick API Reference","text":"","category":"section"},{"location":"ref_api/#","page":"Quick API Reference","title":"Quick API Reference","text":"(Image: imgs/CoreAPI.png)","category":"page"},{"location":"BuildingGraphs/#Building-Graphs-1","page":"Building Graphs","title":"Building Graphs","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In this section constructing DFG graphs will be discussed. To start, bring DistributedFactorGraphs into your workspace:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using DistributedFactorGraphs","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"We recommend using IncrementalInference (IIF) to populate DFG graphs. DFG provides the structure, but IIF overloads the provided addVariable! and addFactor! functions and creates solver-specific data that allows the graph to be solved. So although you can use DFG's addVariable! and addFactor!, it is better to start with IIF's functions so that the graph is solvable.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"So for the following examples, IncrementalInference will be used to create the variables and factors. It should be added and imported to run the examples:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using Pkg\nPkg.add(\"IncrementalInference\")","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using IncrementalInference","category":"page"},{"location":"BuildingGraphs/#Initializing-a-Graph-1","page":"Building Graphs","title":"Initializing a Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG graphs can be built using various drivers (different representations of the underlying graph). At the moment DFG supports 2 drivers:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"LightDFG: An in-memory graph that uses LightGraphs.jl for representing the graph.\nCloudGraphs: A database-driven graph that uses Neo4j.jl for interacting with the graph.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In general the in-memory drivers are used for building and solving graphs, and CloudGraphs is used for persisting in-memory graphs into a database.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To continue the example, run one of the following to create a DFG driver:","category":"page"},{"location":"BuildingGraphs/#Creating-a-LightDFG-Graph-1","page":"Building Graphs","title":"Creating a LightDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(solverParams=SolverParams())","category":"page"},{"location":"BuildingGraphs/#Creating-a-CloudGraphsDFG-Graph-1","page":"Building Graphs","title":"Creating a CloudGraphsDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with no solver parameters (just to demonstrate the difference) using the CloudGraphs driver, and connect it to a local Neo4j instance.\ncfg = CloudGraphsDFG{NoSolverParams}(\"localhost\", 7474, \"neo4j\", \"test\",\n                                     \"testUser\", \"testRobot\", \"testSession\")","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-and-Factors-1","page":"Building Graphs","title":"Creating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG and IIF rely on a CRUD (Create, Read, Update, and Delete) interface to allow users to create and edit graphs.","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-with-IIF-1","page":"Building Graphs","title":"Creating Variables with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables are added using IncrementalInference's addVariable! function. To create the variable, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe variable's label (e.g. :x1 or :a)\nThe variable inference type (aka soft type), which is a subtype of InferenceVariable","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Once variables are initialized to a specific soft type, variable node data (solver data) is templated to that type.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In addition, the following optional parameters are provided:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additional labels for the variable (in DFG these are referred to as tags)\nA solvable flag to indicate whether the variable is ready to be added to a solution","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Three variables are added:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"v1 = addVariable!(dfg, :x0, ContinuousScalar, tags = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, tags = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, tags = [:LANDMARK], solvable=1)","category":"page"},{"location":"BuildingGraphs/#Creating-Factors-with-IIF-1","page":"Building Graphs","title":"Creating Factors with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Similarly to variables, it is recommended that users start with the IIF implementation of the addFactor! functions to create factors. To create the factors, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe labels for the variables that the factor is linking\nThe factor function (which is a subtype of )","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additionally, the solvable flag is also set to indicate that the factor can be used in solving graphs.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Every graph requires a prior for it to be solvable, so it is a good practice to make sure one is added (generally by adding to the first variable in the graph).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Four factors are added: a prior, a linear conditional relationship with a normal distribution between x0 and x1, and a pair of linear conditional relationships between each pose and the landmark.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"prior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The produced factor graph is:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(Image: imgs/initialgraph.jpg)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(For more information on producing plots of the graph, please refer to the Drawing Graphs section).","category":"page"},{"location":"BuildingGraphs/#Listing-Variables-and-Factors-1","page":"Building Graphs","title":"Listing Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Reading, updating, and deleting all use DFG functions (as opposed to adding, where using the IncrementalInference functions are recommended).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Each variable and factor is uniquely identified by its label. The list of variable and factor labels can be retrieved with the ls/listVariables and lsf/listFactors functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"For example listing the variables in the graph we created above:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"ls(dfg)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Or listing the factors:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"lsf(dfg)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To list all variables or factors (instead of just their labels), use the getVariables and getFactors functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariables\ngetFactors","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Traversing and Querying functions for finding the relationships and building subtraphs include:  ","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getNeighbors\nbuildSubgraph\ngetBiadjacencyMatrix","category":"page"},{"location":"BuildingGraphs/#Getting-(Reading)-Variables-and-Factors-1","page":"Building Graphs","title":"Getting (Reading) Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Individual variables and factors can be retrieved from their labels using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariable\ngetFactor","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"It is worth noting that getVariable allows a user to retrieve only a single solver entry, so that subsets of the solver data can be retrieved individually (say, in the case that there are many solutions). These can then be updated independently using the functions as discussed in the update section below.","category":"page"},{"location":"BuildingGraphs/#Updating-Variables-and-Factors-1","page":"Building Graphs","title":"Updating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Full variables and factors can be updated using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"updateVariable!\nupdateFactor!","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Skeleton and summary variables are read-only. To perform updates you should use the full factors and variables.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: updateVariable/updateFactor performs a complete update of the respective node. It's not a very efficient way to edit fine-grain detail. There are other methods to perform smaller in-place changes. This is discussed in more detail in Data Structure.","category":"page"},{"location":"BuildingGraphs/#Deleting-Variables-and-Factors-1","page":"Building Graphs","title":"Deleting Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables and factors can be deleted using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"deleteVariable!\ndeleteFactor!","category":"page"},{"location":"variable_factor_serialization/#Serialization-of-Variables-and-Factors-1","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"If you are transferring variables and factors over a wire you need to serialize and deserialize variables and factors.","category":"page"},{"location":"variable_factor_serialization/#Packing-and-Unpacking-1","page":"Serialization of Variables and Factors","title":"Packing and Unpacking","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Packing is done with the exposed functions packVariable()::Dict{String, Any} and packFactor()::Dict{String, Any}. You can then serialize this into a string or JSON as you would normally.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Note: When you deserialize a factor and want to use it for solving, you must call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor) to reinflate it completely. Please review FileDFG service for an example.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"For example:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = LightDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Now serialize them:\npVariable = packVariable(dfg, x0)\npFactor = packFactor(dfg, prior)\n\n# And we can deserialize them\nupVariable = unpackVariable(dfg, pVariable)\n# FYI: The graph is used in unpackFactor to find the variables that the factor links to.\nupFactor = unpackFactor(dfg, pFactor, IncrementalInference)\n# Note, you need to call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor)\n# to make it useable. Please add an issue if this poses a problem or causes issues.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"As a more complex example, we can use JSON2 to stringify the data and write it to a folder of files as FileDFG does:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = LightDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Slightly fancier example: We can use JSON2, we can serialize to a string\nvarFolder = \"/tmp\"\nfor v in getVariables(dfg)\n    vPacked = packVariable(dfg, v)\n    io = open(\"$varFolder/$(v.label).json\", \"w\")\n    JSON2.write(io, vPacked)\n    close(io)\nend\n# Factors\nfor f in getFactors(dfg)\n    fPacked = packFactor(dfg, f)\n    io = open(\"$folder/factors/$(f.label).json\", \"w\")\n    JSON2.write(io, fPacked)\n    close(io)\nend","category":"page"},{"location":"GraphData/#Using-Graph-Elements-1","page":"Using Graph Elements","title":"Using Graph Elements","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Variables and factors in DistributedFactorGraphs are used for a variety of different applications. We have tried to compartmentalize the data as much as possible so that users do not need to dig around to find what they need (it's a work in progress).","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"There are three fundamental types of data in DFG:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Variable and factor data (stored in the nodes themselves)\nOffloaded big data elements (keyed in a variable or factor, but stored in another location)\nGraph data (data that is related to the graph itself)","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"The following is a guideline to using these parameters.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"NOTE: Some functions are direct accessors to the internal parameters, others are derived functions (e.g. getLabel(v) = v.label). In other cases the accessors are simplified ways to interact with the structures. We recommend using the accessors as the internal structure may change over time.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"NOTE: Adds in general throw an error if the element already exists. Update will update the element if it exists, otherwise it will add it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"NOTE: In general these functions will return an error if the respective element is not found. This is to avoid returning, say, nothing, which will be horribly confusing if you tried getVariableSolverData(dfg, :a, :b) and it returned nothing - which was missing, :a or :b, or was there a communication issue? We recommend coding defensively and trapping errors in critical portions of your user code.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"NOTE: All data is passed by reference, so if you update the returned structure it will update in the graph. The database driver is an exception, and once the variable or factor is updated you need to call update* to persist the changes to the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"The following examples make use of this data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"using IncrementalInference\n# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(params=SolverParams())\n\nx0 = addVariable!(dfg, :x0, ContinuousScalar, tags = [:POSE], solvable=1)\nx1 = addVariable!(dfg, :x1, ContinuousScalar, tags = [:POSE], solvable=1)\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)","category":"page"},{"location":"GraphData/#Variable-and-Factor-Elements-1","page":"Using Graph Elements","title":"Variable and Factor Elements","text":"","category":"section"},{"location":"GraphData/#Common-Elements-1","page":"Using Graph Elements","title":"Common Elements","text":"","category":"section"},{"location":"GraphData/#Labels-1","page":"Using Graph Elements","title":"Labels","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Labels are the principle identifier of a variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getLabel","category":"page"},{"location":"GraphData/#Timestamps-1","page":"Using Graph Elements","title":"Timestamps","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Each variable or factor can have a timestamp associated with it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getTimestamp\nsetTimestamp!","category":"page"},{"location":"GraphData/#Tags-1","page":"Using Graph Elements","title":"Tags","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Tags are a set of symbols that contain identifiers for the variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"listTags\nmergeTags!\nremoveTags!\nemptyTags!","category":"page"},{"location":"GraphData/#Solvable-1","page":"Using Graph Elements","title":"Solvable","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"The solvable flag indicates whether the solver should make use of the variable or factor while solving the graph. This can be used to construct graphs in chunks while solving asynchronously, or for selectively solving portions of the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getSolvable\nsetSolvable!","category":"page"},{"location":"GraphData/#Variables-1","page":"Using Graph Elements","title":"Variables","text":"","category":"section"},{"location":"GraphData/#Variable-Type-1","page":"Using Graph Elements","title":"Variable Type","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"The variableType is the underlying inference variable type, such as a Pose2.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getVariableType","category":"page"},{"location":"GraphData/#Packed-Parametric-Estimates-1","page":"Using Graph Elements","title":"Packed Parametric Estimates","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Solved graphs contain packed parametric estimates for the variables, which are keyed by the solution (the default is saved as :default).","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"For each PPE structure, there are accessors for getting individual values:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getMaxPPE\ngetMeanPPE\ngetSuggestedPPE","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Related functions for getting, adding/updating, and deleting PPE structures:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"listPPEs\ngetPPE\naddPPE!\nupdatePPE!\ndeletePPE!\nmergePPEs!","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Example of PPE operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"# Add a new PPE of type MeanMaxPPE to :x0\nppe = MeanMaxPPE(:default, [0.0], [0.0], [0.0])\naddPPE!(dfg, :x0, ppe)\n@show listPPEs(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nv = getPPE(dfg, :x0, :default)\n# Delete it\ndeletePPE!(dfg, :x0, :default)\n# Update add it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Update update it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Bulk copy PPE's for x0 and x1\nupdatePPE!(dfg, [x0], :default)","category":"page"},{"location":"GraphData/#Solver-Data-1","page":"Using Graph Elements","title":"Solver Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Solver data is used by IncrementalInference/RoME/Caesar solver to produce the above PPEs.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Related functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"listVariableSolverData\ngetVariableSolverData\naddVariableSolverData!\nupdateVariableSolverData!\ndeleteVariableSolverData!\nmergeVariableSolverData!","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Example of solver data operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"# Add new VND of type ContinuousScalar to :x0\n# Could also do VariableNodeData(ContinuousScalar())\nvnd = VariableNodeData{ContinuousScalar}()\naddVariableSolverData!(dfg, :x0, vnd, :parametric)\n@show listVariableSolverData(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nvndBack = getVariableSolverData(dfg, :x0, :parametric)\n# Delete it\ndeleteVariableSolverData!(dfg, :x0, :parametric)","category":"page"},{"location":"GraphData/#Small-Data-1","page":"Using Graph Elements","title":"Small Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Small data allows you to assign a dictionary to variables. It is a useful way to keep small amounts of string data in a variable. As it is stored in the graph itself, large entries will slow the graph down, so if data should exceed a few bytes/kb, it should rather be saved in bigData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getSmallData\nsetSmallData!","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Example:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"setSmallData!(x0, Dict(\"entry\"=>\"entry value\"))\ngetSmallData(x0)","category":"page"},{"location":"GraphData/#Big-Data-1","page":"Using Graph Elements","title":"Big Data","text":"","category":"section"},{"location":"GraphData/#Factors-1","page":"Using Graph Elements","title":"Factors","text":"","category":"section"},{"location":"GraphData/#Graph-Related-Data-1","page":"Using Graph Elements","title":"Graph-Related Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"DFG can store data in the graph itself (as opposed to inside graph elements). When you retrieve graphs from a database, this information is carried along. If you are working with an in-memory graph, the structure is flattened into the graph itself as userData, robotData, and sessionData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Graphs reside inside a hierarchy made up in the following way:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"User1\nRobot1\nSession1 (the graph itself)\nUser2\nRobot2\nRobot3\nSession2\nSession3","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"This data can be retrieved with the follow functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"getUserData\ngetRobotData\ngetSessionData","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"It can be set using the following functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"setUserData!\nsetRobotData!\nsetSessionData!","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"Example of using graph-level data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Elements","title":"Using Graph Elements","text":"setUserData!(dfg, Dict(:a => \"Hello\"))\ngetUserData(dfg)","category":"page"},{"location":"DrawingGraphs/#Drawing-Graphs-1","page":"Drawing Graphs","title":"Drawing Graphs","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Graphs can be visualized by using either GraphPlot or rendering to .dot files (which can be viewed using xdot).","category":"page"},{"location":"DrawingGraphs/#GraphPlot-1","page":"Drawing Graphs","title":"GraphPlot","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"GraphPlot plotting is available if GraphPlot is imported before DFG is imported. Install GraphPlot using the following command:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using Pkg\nPkg.add(\"GraphPlot\")","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Then bring GraphPlot in before DFG:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using GraphPlot\nusing DistributedFactorGraphs","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Any factor graph can then be drawn by calling dfgplot:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using Cairo # hide\n# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = LightDFG{SolverParams}(solverParams=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, tags = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, tags = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, tags = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n\n# Plot graph\ndfgplot(dfg)","category":"page"},{"location":"DrawingGraphs/#Rendering-GraphPlot-to-PDF-1","page":"Drawing Graphs","title":"Rendering GraphPlot to PDF","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"The graph can be rendered to PDF, SVG or JPG in the following way by including compose:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using Compose\n# lets add another variable and factor and plot it\ndfg.solverParams.graphinit = false # hide\naddVariable!(dfg, :x2, ContinuousScalar);\naddFactor!(dfg, [:x1; :x2], LinearConditional(Normal(50.0,2.0)));\n# Save to SVG\ndraw(SVG(\"graph.svg\", 10cm, 10cm), dfgplot(dfg));\nnothing # hide","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"(Image: )","category":"page"},{"location":"DrawingGraphs/#More-Information-1","page":"Drawing Graphs","title":"More Information","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"More information at GraphPlot.jl","category":"page"},{"location":"DrawingGraphs/#Dot-Files-1","page":"Drawing Graphs","title":"Dot Files","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Dot files are a standard format for visualizing graphs and applications such as xdot are available to view the files. Dot plotting does not require GraphPlot and can be drawn by either:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Calling toDot on any graph to produce a string of the graph\nCalling toDotFile on any graph to save it directly to a dotfile","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using DistributedFactorGraphs\n# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = LightDFG{SolverParams}(solverParams=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, tags = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, tags = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, tags = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n# Save to dot file\ntoDotFile(dfg, \"/tmp/test.dot\")\n# Open with xdot\n# run(`xdot /tmp/test.dot`)\n# nothing # hide","category":"page"},{"location":"SavingData/#Saving-and-Loading-Graphs-1","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"","category":"section"},{"location":"SavingData/#","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"Data can be saved and loaded from disk using FileDFG.","category":"page"},{"location":"SavingData/#Saving-Data-1","page":"Saving and Loading Graphs","title":"Saving Data","text":"","category":"section"},{"location":"SavingData/#Loading-Data-1","page":"Saving and Loading Graphs","title":"Loading Data","text":"","category":"section"},{"location":"example/#Example-1","page":"Example","title":"Example","text":"","category":"section"}]
}
